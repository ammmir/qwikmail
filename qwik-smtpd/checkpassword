#!/usr/bin/perl
# checkpassword
# part of qwik-smtpd MTA server package
# (C) 2002 Amir Malik.
# http://qwikmail.sourceforge.net/smtpd/

use Socket;

# general regex for validating email address
my $exp = '([^":\s<>()/;]*@[^":\s<>()/;]*)';
# ip regex
my $IP =  '^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$';

my $email = $ARGV[0] || $ENV{RCPT_TO};
$email =~ /$exp/smg;
$email =~ s/(<|>|\#|\!|\\|\/|\s)//g;

my $ip = $ENV{REMOTE_ADDR};
if(my $rbl = lookupRBL($ip)) {
  print "550 $rbl\r\n";
  exit(1);
}

if(!$email) {
  print "550 configuration error\r\n";
  exit(1);
}

my $dom;
foreach $dom (readMultilineConfig("rcpthosts")) {
  $email =~ s/\@$dom//ig;
}

if(-e "/home/$email/") {
  if(open(FORWARD,"</home/$email/.forward")) {
    my @forwards;
    while(<FORWARD>) {
      chomp;
      next if(length($_) < 2);
      my @addrs = split(/,/, $_);
      foreach my $addr (@addrs) {
        next if(length($addr) < 2);
        push(@forwards, $addr);
      }
    }
    close(FORWARD);
    my $addr = $forwards[0];
    $addr =~ s/\s//g;
    print "251 user not local; will forward to <$addr>\r\n";
  } else {
    print "250 ok\r\n";
  }
} else {
  my %a = getAliases();
  my $u, $e;
  foreach $u (keys %a) {
    my $z;
    *z = $a{$u};
    #below is for multiple aliases; not supported yet
    #foreach(@z) {
    #  $z .= "$_ ";
    #}
    if($u =~ /^$email$/i) {
      print "251 user not local; will forward to <$z[0]>\r\n";
      exit(0);
    }
  }
  print "550 user not here\r\n";
}

exit(0);

sub readMultilineConfig {
  open(CONFIG,"</etc/qwik-smtpd/$_[0]");
  my @conf;
  while(<CONFIG>) {
    chomp;
    next if(length($_) < 2);
    push(@conf,$_);
  }
  close(CONFIG);
  return @conf;
}

sub getAliases {
  open(ALIASES, "</etc/aliases");
  my(%a);
  while(<ALIASES>) {
    chomp;
    next if (/^\#/);
    next if (/^\s*$/);
    local($alias, $content) = m/^\s*([^:]+):\s*(.*)$/;
    local(@content) = split(/\s*,\s*/, $content);
    local(@entries);
    undef @entries;
    while(@content) {
      my($entry) = pop @content;
      push(@entries, $entry);
    }
    $a{$alias} = [@entries];
  }
  close(ALIASES);
  return %a;
}

sub lookupRBL {
  my $rev = $_[0];
  my($dom,%ns);
  foreach $dom (readMultilineConfig("blacklists")) {
    $dom =~ m/^(.+?),(.*)/;
    $ns{"$1"} = $2;
  }
  $rev =~ m/$IP/;
  $rev = "$4.$3.$2.$1";
  foreach $dom (keys %ns) {
    if(gethostbyname("$rev.$dom.")) {
       return $ns{"$dom"};
     }
  }
  return undef;
}
